const TAG = " | Forex analytics | "

let log = require("default-logger")()


var fs = require('fs')
    , path = require('path')
    //, analytics = require('forex-analytics-fomo')

let model

module.exports =  {
  name: 'forex_analytics',
  description: 'Apply the trained forex analytics model.',

  getOptions: function (s) {
    // this.option('modelfile', 'modelfile (generated by running `train`), should be in models/', String, 'none')
    // this.option('period', 'period length of a candlestick (default: 30m), same as --period_length', String, '30m')
    // this.option('period_length', 'period length of a candlestick (default: 30m), same as --period', String, '30m')
    // this.option('min_periods', 'min. number of history periods', Number, 100)

    if (s.options) {
      if (!s.options.modelfile) {
        console.error('No modelfile specified. Please train a model and specify the resulting file.')
        process.exit(1)
      }
      console.log("********************* options: ",s.options)


      //var modelfile = s.options.modelfile
      modelfile = s.options.modelfile

      model = require(modelfile)

      //if (true) {
      //   modelfile = s.options.modelfile
      // } else {
      //   modelfile = path.resolve(__dirname, '../../../', s.options.modelfile)
      // }

      // if (fs.existsSync(modelfile)) {
      //   model = require(modelfile)
      //   console.log("model: ",model)
      // } else {
      //   console.error('Modelfile ' + modelfile + ' does not exist.')
      //   process.exit(1)
      // }
      // TODO why the fuck




      // if (s.options.period !== model.period) {
      //   console.error(('Error: Period in model training was ' + model.period + ', now you specified ' + s.options.period + '.').red)
      //   process.exit(1)
      // }
    }
  },

  calculate: function () {
    // Calculations only done at the end of each period
  },

  onPeriod: function (s, cb) {
    console.log("lookback: ",s.lookback.length)
    console.log("min_periods: ",s.options.min_periods)
    if (s.lookback.length > s.options.min_periods) {

      var candlesticks = []

      var candlestick = {
        open: s.period.open,
        high: s.period.high,
        low: s.period.low,
        close: s.period.close,
        time: s.period.time / 1000
      }
      candlesticks.unshift(candlestick)

      s.lookback.slice(0, s.lookback.length).map(function (period) {
        var candlestick = {
          open: period.open,
          high: period.high,
          low: period.low,
          close: period.close,
          time: period.time / 1000
        }
        candlesticks.unshift(candlestick)
      })

      //console.log("candlesticks: ",candlesticks)
      console.log("candlesticks: ",candlesticks.length)

      let model = {
        "strategy": {
          "buy": {
            "operator": "Or",
            "left": {
              "operator": "And",
              "left": {
                "indicator": "RSI",
                "sign": ">",
                "value": 86342.32330321276
              },
              "right": {
                "indicator": "RSI",
                "sign": ">",
                "value": 18361.91121722673
              }
            },
            "right": {
              "operator": "Or",
              "left": {
                "indicator": "Stochastic",
                "sign": ">",
                "value": 10902.356656755092
              },
              "right": {
                "indicator": "RSI",
                "sign": ">",
                "value": 7014.610294654564
              }
            }
          },
          "sell": {
            "operator": "And",
            "left": {
              "operator": "And",
              "left": {
                "indicator": "Stochastic",
                "sign": "<",
                "value": -17374.021573824244
              },
              "right": {
                "indicator": "Stochastic",
                "sign": "<",
                "value": -10625.087759540515
              }
            },
            "right": {
              "operator": "Or",
              "left": {
                "indicator": "CCI",
                "sign": ">",
                "value": 404617.3684767127
              },
              "right": {
                "indicator": "SAR",
                "sign": ">",
                "value": 9747339.833973436
              }
            }
          }
        }
      }

      var result = analytics.getMarketStatus(candlesticks, {'strategy': model.strategy})

      log.info("result: marketStatus:  ",result)

      if (result.shouldSell) {
        s.signal = 'sell'
      } else if (result.shouldBuy) {
        s.signal = 'buy'
      }

    } else {
      //log.info("Not doing analytics??")
    }

    cb()

  },

  onReport: function () {
    var cols = []
    return cols
  },

  phenotypes: null
}

